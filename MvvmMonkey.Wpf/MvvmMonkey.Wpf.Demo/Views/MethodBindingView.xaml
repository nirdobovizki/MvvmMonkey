<UserControl x:Class="NirDobovizki.MvvmMonkey.Wpf.Demo.Views.MethodBindingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="600">
    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <TextBlock Grid.ColumnSpan="2" TextWrapping="Wrap" FontSize="17">The button you just clicked called a method using data binding without declaring a command on the view model</TextBlock>
        <UniformGrid Rows="1" Grid.Row="1">
            <CheckBox Content="Can execute" IsChecked="{Binding CanDoSomething}"/>
            <Button Command="{Binding DoSomething}" Content="Do something"/>
        </UniformGrid>
        <UniformGrid Rows="1" Grid.Row="2" Grid.ColumnSpan="2">
            <TextBox Name="paramBox"/>
            <CheckBox Content="Can execute" IsChecked="{Binding CanDoSomethingParam}"/>
            <Button Command="{Binding DoSomethingParam}" CommandParameter="{Binding Text,ElementName=paramBox}" Content="Do something"/>
        </UniformGrid>
        <Border Padding="3" BorderThickness="1" BorderBrush="Gray" Grid.Row="3">
            <TextBlock >View Model</TextBlock>
        </Border>
        <Border Padding="3" BorderThickness="1" BorderBrush="Gray" Grid.Row="3" Grid.Column="1">
            <TextBlock >View</TextBlock>
        </Border>
        <Border Padding="3" BorderThickness="1" BorderBrush="Gray" Grid.Row="4" >
            <TextBlock TextWrapping="Wrap" FontFamily="Consolas" xml:space="preserve">
<Run Foreground="red">[TypeDescriptionProvider(typeof(MethodBinding))]</Run>
class DemoSelectionViewModel : INotifyPropertyChanged
{
    public void MethodBindingDemo()
    {
        Child = new MethodBindingViewModel();
    }
}</TextBlock>
        </Border>
        <Border Padding="3" BorderThickness="1" BorderBrush="Gray" Grid.Row="4" Grid.Column="1" >
            <TextBlock TextWrapping="Wrap" FontFamily="Consolas" xml:space="preserve">
&lt;Button Command="<Run Foreground="red">{Binding MethodBindingDemo}</Run>"&gt;
   &lt;TextBlock TextWrapping="Wrap" Text="Bind to method demo"/&gt;
&lt;/Button&gt;

            </TextBlock>
        </Border>
        <TextBlock Grid.Row="5" Grid.ColumnSpan="2" TextWrapping="Wrap">
            Adding an attribute to your view model will create a "fake" property of type ICommand for each method in
            the class that accepts one or two parameters.<LineBreak/><LineBreak/>
            This will not interfere with normal data binding 
        </TextBlock>
    </Grid>
</UserControl>
